generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  role      String   @default("donor")
  firstname String
  lastname  String
  email     String
  age       Int
  phone     Int
  state     String
  district  String
  address   String
  pincode   Int
  donor     Donor?  @relation
  staff     BloodBankStaff?  @relation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donor {
  id        String   @id @default(cuid())
  bloodType String
  userId    String   @unique // Unique because a donor corresponds to only one user
  user      User     @relation(fields: [userId], references: [id])
  medicalHistories MedicalHistory[]
  appointments     Appointment[]  
  donations        Donation[]
}


model BloodBankStaff {
  id          String   @id @default(cuid())
  staffRole   StaffRole  // this will tell us what role the staff member has
  bloodBankId   String
  bloodBank  BloodBank @relation(fields: [bloodBankId], references: [id])
  userId    String   @unique // Unique because a donor corresponds to only one user
  user      User     @relation(fields: [userId], references: [id])
}

enum StaffRole {
  ADMIN
  USER
}

model BloodBank {
  id                    String   @id @default(cuid())
  name                  String
  email                 String
  parentHospitalName    String
  category              BloodBankCategory
  contactNo             Int
  firstRegistrationDate DateTime
  fromDate              DateTime
  toDate                DateTime
  LicenseNo             String
  state                 String
  district              String
  city                  String
  staff                 BloodBankStaff[]
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}

enum BloodBankCategory {
  Government
  Private
}


model MedicalHistory {
  id          String   @id @default(cuid())
  donor       Donor    @relation(fields: [donorId], references: [id])
  donorId     String
  conditions  String[]
  medications String[]
  createdAt   DateTime @default(now())
}

model Appointment {
  id        String   @id @default(cuid())
  donor     Donor    @relation(fields: [donorId], references: [id])
  donorId   String
  date      DateTime
  location  String
  status    String @default("Scheduled")  // Scheduled, Completed, Canceled.
  createdAt DateTime @default(now())
}

// Create a new donation.
model Donation {
  id         String   @id @default(cuid())
  donor      Donor    @relation(fields: [donorId], references: [id])
  donorId    String
  date       DateTime @default(now())
  bloodUnits Int
  location   String
}

model DonationInfo {
  id                  String   @id @default(cuid())
  donorType      DonorType  
  donationType   DonationType 
  componentTypes ComponentType[] 
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

}

enum DonorType {
  VOLUNTARY
  FAMILY
}

enum DonationType {
  WHOLE_BLOOD
}

enum ComponentType {
  PACKED_RED_BLOOD_CELLS // PRBC
  FRESH_FROZEN_PLASMA // FFP
  PLATELET_CONCENTRATE
}

